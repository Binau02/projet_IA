# -*- coding: utf-8 -*-
"""Script.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/11kXZfN2f8NtqETHO0valhOrwmI77e7WO

# Préparation des données

Importation des librairies
"""

import pandas as pd
import sklearn as sk
import numpy as np
from sklearn.metrics import accuracy_score
from sklearn.preprocessing import StandardScaler

"""Importer le fichier CSV"""


df = pd.read_csv('data/stat_acc_V3.csv', sep =";")  
data = pd.DataFrame(df)

"""Préparation des données"""

# ça nous avance pas bcp
data.drop('Num_Acc', inplace=True, axis=1)
data.drop('id_usa', inplace=True, axis=1)
data.drop('date', inplace=True, axis=1)
# sinon ça marche po
data.drop('num_veh', inplace=True, axis=1)
data.drop('ville', inplace=True, axis=1)
data.drop('id_code_insee', inplace=True, axis=1)
data.drop('descr_cat_veh', inplace=True, axis=1)
data.drop('descr_agglo', inplace=True, axis=1)
data.drop('descr_athmo', inplace=True, axis=1)
data.drop('descr_lum', inplace=True, axis=1)
data.drop('descr_etat_surf', inplace=True, axis=1)
data.drop('description_intersection', inplace=True, axis=1)
data.drop('descr_dispo_secu', inplace=True, axis=1)
data.drop('descr_grav', inplace=True, axis=1)
data.drop('descr_motif_traj', inplace=True, axis=1)
data.drop('descr_type_col', inplace=True, axis=1)
data.drop('dept', inplace=True, axis=1)
data.drop('region', inplace=True, axis=1)
data.drop('CODE_REG', inplace=True, axis=1)

print(data.head())

from sklearn import *

x, y = data.drop(columns=["gravity"]), data.gravity

from sklearn.model_selection import train_test_split
x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.5)

"""# PCA

Analayse en Composante Principale
"""

from sklearn.preprocessing import StandardScaler

# features = ['athmo_num', 'etat_surf_num', 'lum_num', 'weight', 'age']
# x = data.loc[:, features].values
# y = data.loc[:,['gravity']].values

# scaler = StandardScaler()
# x = scaler.fit_transform(x)

# from sklearn.decomposition import PCA
# pca = PCA(n_components=2)
# x_reduit = pca.fit_transform(x)

# principalDf = pd.DataFrame(data = x_reduit, columns = ['principal component 1', 'principal component 2'])
# finalDf = pd.concat([principalDf, data[['gravity']]], axis = 1)

"""Visualisation"""

import matplotlib.pyplot as plt

# fig = plt.figure(figsize = (8,8))
# ax = fig.add_subplot(1,1,1)
# ax.set_xlabel('Principal Component 1', fontsize = 15)
# ax.set_ylabel('Principal Component 2', fontsize = 15)
# ax.set_title('2 component PCA', fontsize = 20)

# targets = [2, 5, 10]
# colors = ['g', 'b', 'r']
# for target, color in zip(targets,colors):
#     indicesToKeep = finalDf['gravity'] == target
#     ax.scatter(finalDf.loc[indicesToKeep, 'principal component 1']
#                , finalDf.loc[indicesToKeep, 'principal component 2']
#                , c = color
#                , s = 50)
# ax.legend(targets)
# ax.grid()

"""# Support Vector Machine"""

# from sklearn import svm

# """Détermination des paramètres optimaux"""

# from sklearn.model_selection import GridSearchCV

# parameters = {
#     'C': [1, 10],
#     'kernel': ['rbf'],
#     'max_iter': [1000, 2000]
# }

# scaler = StandardScaler()
# x = scaler.fit_transform(x)

# svc = svm.SVC()
# clf = GridSearchCV(svc, parameters)
# clf.fit(x_train, y_train)

# #score d’échantillons bien classifiés sur le jeu de données de test
# print(clf.score(x_test, y_test)," ",clf.best_params_)

# svc = svm.SVC(C=1,kernel='rbf')
# svc.fit(x_train, y_train)

# y_pred = svc.predict(x_test)

# #score d’échantillons bien classifiés sur le jeu de données de test
# score_svc = accuracy_score(y_test, y_pred)
# print(score_svc)

"""# Random forest"""

# from sklearn.ensemble import RandomForestClassifier

# """Détermination des paramètres optimaux"""

from sklearn.model_selection import GridSearchCV

# parameters = {
#     'bootstrap': [True,False],
#     'max_features': ['sqrt'],
#     'max_depth': [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, None],
#     'min_samples_leaf': [2, 5, 10],
#     'min_samples_split': [2, 5, 10],
#     'n_estimators': [200, 400, 600, 800, 1000, 1200, 1400, 1600, 1800, 2000]
# }

# raf = RandomForestClassifier()
# clf = GridSearchCV(raf, parameters)
# clf.fit(x_train, y_train)

# #score d’échantillons bien classifiés sur le jeu de données de test
# print(clf.score(x_test, y_test)," ",clf.best_params_)

# raf = RandomForestClassifier()
# raf.fit(x_train, y_train)

# y_pred = raf.predict(x_test)

# #score d’échantillons bien classifiés sur le jeu de données de test
# score_raf = accuracy_score(y_test, y_pred)
# print(score_raf)

"""# Multilayer Perceptron"""

from sklearn.linear_model import Perceptron

"""Détermination des paramètres optimaux"""

from sklearn.model_selection import GridSearchCV

# parameters = {
#     'tol': [1e-3,1e-4,1e-5,1e-6]
# }

# per = Perceptron()
# clf = GridSearchCV(per, parameters)
# clf.fit(x_train, y_train)

# #score d’échantillons bien classifiés sur le jeu de données de test
# print(clf.score(x_test, y_test)," ",clf.best_params_)

# per = Perceptron(tol=1e-3)
# per.fit(x_train, y_train)

# y_pred = per.predict(x_test)

# #score d’échantillons bien classifiés sur le jeu de données de test
# score_per = accuracy_score(y_test, y_pred)
# print(score_per)

# """# Comparaison des modèles"""

# score_max = max([score_svc, score_raf, score_per])
# if score_max == score_svc:
#   print("Le meilleur modèle est Support Vector Machine")
# elif score_max == score_raf:
#   print("Le meilleur modèle est Random Forest")
# else:
#   print("Le meilleur modèle est Multilayer Perceptron")
# print(score_max,"% des prédictions sont bonnes")

from sklearn.model_selection import GridSearchCV

parameters = {
    'hidden_layer_sizes': [(50,50,50), (50,100,50), (100,)],
    'activation': ['tanh', 'relu'],
    'solver': ['sgd', 'adam'],
    'alpha': [0.0001, 0.05],
    'learning_rate': ['constant','adaptive']
}

per = Perceptron()
clf = GridSearchCV(per, parameters)
clf.fit(x_train, y_train)

#score d’échantillons bien classifiés sur le jeu de données de test
print(clf.score(x_test, y_test)," ",clf.best_params_)